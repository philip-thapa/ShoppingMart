# Generated by Django 4.2 on 2024-09-02 15:56

import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(db_column='email', max_length=56, unique=True)),
                ('phone', models.CharField(blank=True, db_column='phone', max_length=10, null=True)),
                ('firstname', models.CharField(db_column='firstName', max_length=16)),
                ('lastname', models.CharField(blank=True, db_column='lastName', max_length=16, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('N/A', 'N/A')], db_column='gender', max_length=10, null=True)),
                ('status', models.CharField(choices=[('A', 'A'), ('I', 'I')], db_column='status', default='A', max_length=1)),
                ('created_at', models.DateTimeField(db_column='createdAt', default=django.utils.timezone.now)),
                ('modified_at', models.DateTimeField(db_column='modifiedAt', default=django.utils.timezone.now)),
                ('date_of_birth', models.DateField(blank=True, db_column='dateOfBirth', null=True)),
                ('loyalty_points', models.IntegerField(db_column='loyaltyPoints', default=0)),
                ('profile_picture', models.ImageField(blank=True, db_column='profilePicture', null=True, upload_to='profile_photos/')),
                ('is_staff', models.BooleanField(db_column='isStaff', default=False)),
                ('roles', models.JSONField(db_column='roles', default=list)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'Users',
            },
        ),
    ]
